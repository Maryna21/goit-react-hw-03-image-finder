{"version":3,"sources":["components/Searchbar/searchbar.js","components/ImageGalleryItem/imageGalleryItem.js","services/imagesApi.js","components/Modal/modal.js","components/Button/button.js","components/ImageGallery/imageGallery.js","App.js","reportWebVitals.js","index.js"],"names":["Searchbar","state","searchNameImg","handleNameChange","event","setState","currentTarget","value","toLowerCase","hanleSubmit","preventDefault","trim","toast","warning","props","onSubmit","className","this","type","placeholder","onChange","Component","ImageGalleryItem","src","alt","onChangeImg","onClick","axios","defaults","baseURL","params","key","image_type","orientation","per_page","api","getImg","query","a","page","get","q","data","hits","totalHits","console","log","modalRoot","document","querySelector","Modal","handleKeyDown","e","code","onClose","handleBackDropClick","target","window","addEventListener","removeEventListener","createPortal","children","Button","onloadMore","ImageGallery","status","error","images","showModal","largeImg","toggleModal","scrollTo","top","documentElement","scrollHeight","behavior","loadMore","prevState","handleClickImage","prevProps","prevName","nextName","prevPage","nextPage","searchMoreImages","imagesAPI","then","Promise","reject","Error","catch","map","item","webformatURL","tags","largeImageURL","id","message","color","height","width","length","App","handleFormSubmil","autoClose","position","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.32916530.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nimport 'App.css';\nimport { toast } from 'react-toastify';\nimport { Component } from 'react';\nexport default class Searchbar extends Component {\n    state = {\n        searchNameImg: '',\n    }\n\n    handleNameChange = event => {\n        this.setState({\n            searchNameImg: event.currentTarget.value.toLowerCase()\n        });\n    }\n\n    hanleSubmit = event => {\n        event.preventDefault();\n        if (this.state.searchNameImg.trim() === '') {\n           return toast.warning('Поле пошуку пусте!');\n           \n        }\n\n        this.props.onSubmit(this.state.searchNameImg);\n\n        this.setState({ searchNameImg: '' });\n    }\n\n    render(){\n    return (\n        <header className=\"Searchbar\">\n            <form className=\"SearchForm\" onSubmit={this.hanleSubmit}>\n                <button type=\"submit\" className=\"SearchForm-button\">\n                    <span className=\"SearchForm-button-label\">Search</span>\n                </button>\n\n                <input\n                    className=\"SearchForm-input\"\n                    type=\"text\"\n                    placeholder=\"Search images and photos\"\n                    onChange={this.handleNameChange}\n                />\n            </form>\n        </header>\n    )\n    }; \n}\nSearchbar.propTypes = {\n    searchNameImg: PropTypes.string,\n}","import PropTypes from 'prop-types';\nimport 'App.css';\nexport default function ImageGalleryItem({ src, alt, onChangeImg}) {\n   \n    return (\n        <li\n            className=\"ImageGalleryItem\"\n        >\n                <img\n                    src={src}\n                    alt={alt}\n                className=\"ImageGalleryItem-image\"\n                onClick={onChangeImg}\n            />\n            \n        </li>      \n    )\n}\n    ImageGalleryItem.propTypes = {\n        src: PropTypes.string,\n        alt: PropTypes.string,\n        onChangeImg: PropTypes.func,\n}\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://pixabay.com/api/';\n\naxios.defaults.params = {\n    key: '19250465-3ecaba10f96f1a4c0424b71f3',\n    image_type: 'photo',\n    orientation: 'horizontal',\n    per_page: 12,\n}\n\nconst getImg = async (query, page = 1) => {\n    try {\n        const { data } = await axios.get('', {\n            params: { q: query, page },\n        })\n        return {\n            hits: data.hits,\n            totalHits: data.totalHits,\n        };\n    }\n    \n    catch (error) {\n        console.log(error);\n        return {\n            hits: [],\n            totalHits: 0,\n        }\n    }\n}\n\n const api = {\n    getImg\n }\n\nexport default api;\n\n\n\n\n\n\n\n// const BASE_URL = 'https://pixabay.com/api/';\n// const API_KEY = '19250465-3ecaba10f96f1a4c0424b71f3';\n\n//  function fetchImages(query, page = 1) {\n//     return fetch(`${BASE_URL}?q=${query}&page={page}&key=${API_KEY}&&image_type=photo&orientation=horizontal&per_page=12`)\n//                 .then(response => {\n//                     if (response.ok) {\n//                         return response.json()\n//                     }\n                  \n//                 })\n//  }\n//  const api = {\n//     fetchImages\n// }\n// export default api;","import PropTypes from 'prop-types';\nimport 'App.css';\nimport { Component } from 'react';\nimport { createPortal } from 'react-dom';\nconst modalRoot = document.querySelector('#modal-root');\nexport default class Modal extends Component {\n\n     handleKeyDown = e => {\n       if (e.code === 'Escape') {\n                this.props.onClose();\n            }\n     }\n    \n    componentDidMount() {\n        window.addEventListener('keydown', this.handleKeyDown);\n    }\n   \n    componentWillUnmount() {\n        window.removeEventListener('keydown', this.handleKeyDown);\n    }\n   \n    handleBackDropClick = event => {\n        if (event.currentTarget === event.target) {\n            this.props.onClose();\n        }\n    }\n\n    render() {\n        return createPortal(\n            <div className=\"Overlay\" onClick={this.handleBackDropClick}>\n                <div className=\"Modal\">\n                    {this.props.children}\n                </div>\n            </div>,\n            modalRoot,\n        );\n    }\n}\n \nModal.propTypes = {\n    onClose: PropTypes.func,\n}","import PropTypes from 'prop-types';\nimport 'App.css';\nexport default function Button({ onloadMore }) {\n   \n    return (\n        <button\n            type=\"button\"\n            className=\"Button\"\n            onClick={onloadMore}\n        >\n            Load more\n        </button>\n    )\n}\n    \nButton.propTypes = {\n    onloadMore: PropTypes.func,\n}","import PropTypes from 'prop-types';\nimport 'App.css';\nimport { Component } from 'react';\nimport ImageGalleryItem from 'components/ImageGalleryItem/imageGalleryItem';\nimport imagesAPI from 'services/imagesApi';\nimport Loader from \"react-loader-spinner\";\nimport Modal from 'components/Modal/modal';\nimport Button from 'components/Button/button';\n\nexport default class ImageGallery extends Component {\n    state = {\n        status: 'idle',\n        error: null,\n        images: [],\n        showModal: false,\n        page: 1,\n        largeImg: '',\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        const prevName = prevProps.searchNameImg;\n        const nextName = this.props.searchNameImg;\n        const prevPage = prevState.page;\n        const nextPage = this.state.page;\n\n        if (prevName !== nextName) {\n            this.setState({\n                images: [],\n                page: 1\n            })\n            this.searchMoreImages(nextName, 1);\n            \n        }\n        if (prevPage !== nextPage && nextPage > 1) {\n            this.searchMoreImages(nextName, nextPage)\n        }\n    }\n        // console.log('prevName', prevName);\n        // console.log('nextName', nextName);\n        // console.log('nextPage', nextPage);\n        \n            searchMoreImages(nextName, nextPage){\n                this.setState({\n                    status: 'pending',\n                })\n                imagesAPI\n                    .getImg(nextName, nextPage)\n                    .then(({ hits:images, totalHits}) => {\n                        if (totalHits === 0) {\n                            this.setState({\n                                images: [],\n                                status: 'reject',\n                            })\n                            return Promise.reject(\n                                new Error(`This ${nextName} not found`)\n                            );\n                        }\n                        this.setState(prevState => ({\n                            images: [...prevState.images, ...images],\n                            status: 'resolved',\n                        }))\n                    })\n                    .catch(error => this.setState({ error, status: 'rejected' }))\n            }\n        \n    toggleModal = () => {\n        this.setState(({ showModal }) => ({\n            showModal: !showModal,\n        }))\n         window.scrollTo({\n            top: document.documentElement.scrollHeight,\n            behavior: 'smooth',});\n        \n    };\n     \n    loadMore = () => {\n        this.setState(prevState => {\n            return { page: prevState.page + 1 }\n        })\n    }\n    \n    handleClickImage = largeImg => {\n        this.setState({ largeImg: largeImg })\n        this.toggleModal();\n    }\n  \n    render() {\n        const { status, error, images, showModal, largeImg } = this.state;\n        return ( \n            <div>\n                 {status === 'idle' && <p>Write seach image name.</p>} \n                    <ul className=\"ImageGallery\">\n                     {images &&\n                        images.map(item => (\n                            <ImageGalleryItem\n                                key={item.id}\n                                src={item.webformatURL}\n                                alt={item.tags}\n                                onChangeImg={() => {\n                                    this.handleClickImage(item.largeImageURL)\n                                }}\n                            />))\n                        }\n                    </ul>\n                {status === 'rejected' && <p>{error.message}</p>}\n                    {status === 'pending' &&\n                <Loader\n                type=\"Circles\"\n                color=\"#00BFFF\"\n                height={100}\n                width={100}\n                />\n        }\n                {(images.length> 0 || status === 'resolved')&&\n                        <Button onloadMore={this.loadMore} />} \n                    {showModal &&\n                    <Modal onClose={this.toggleModal}>\n                    <img src={largeImg} alt={images.tags}/>\n                    </Modal>} \n                    </div>\n            )\n        }      \n}\n    \nImageGallery.propTypes = {\n     status: PropTypes.string,\n        error: PropTypes.string,\n        images: PropTypes.array,\n        showModal: PropTypes.bool,\n        page: PropTypes.number,\n        largeImg: PropTypes.string,\n\n}\n\n","import { ToastContainer} from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport Searchbar from 'components/Searchbar/searchbar';\nimport ImageGallery from 'components/ImageGallery/imageGallery';\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\nimport { Component } from 'react';\n\n\nexport default class App extends Component {\n  state = {\n    searchNameImg: '',\n  }\n  \n  handleFormSubmil = searchNameImg => {\n    this.setState({ searchNameImg });\n  }\n\n  render(){\n\n      return (\n        <>\n          <Searchbar onSubmit={this.handleFormSubmil} />\n          <ToastContainer autoClose={3000} position=\"top-center\" />\n          <ImageGallery searchNameImg={this.state.searchNameImg} />\n        </>\n      );\n    }\n  }\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}